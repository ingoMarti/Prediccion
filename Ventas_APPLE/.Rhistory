fit1=auto.arima(oVentas,lambda=0)
summary(fit1)
#residual analysis
ggtsdisplay(fit1$residuals)
#box-Ljung Test
Box.test(fit1$residuals,lag=4, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=8, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=8, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=6, fitdf=1, type="Lj")
gData=data.frame(Date=time(fit1$residuals), fit1$residuals, check.names=FALSE, row.names=NULL)
ggplot(gData, aes(x=fit1$residuals)) +
geom_point(aes(x=Date,y=fit1$residuals))+
geom_line(aes(x=Date,y=fit1$residuals))+
geom_hline(yintercept = 2*sd(fit1$residuals),color="red",linetype = 2)+
geom_hline(yintercept = -2*sd(fit1$residuals),color="red",linetype = 2)+
ylab("Residuos")+
ggtitle("Residuos Modelo ARIMA: Ventas Trimestrales APPLE")+
xlab("Trimestres")
fVentas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fVentas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción Apple")
fVentas.arima
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fventas.arima,color="blue",alpha=0.183, plot.conf = FALSE)+
geom_forecast(fventas.ets,color="red", alpha=0.183,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
fVentas.arima
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fventas.arima,color="blue",alpha=0.183, plot.conf = FALSE)+
geom_forecast(fventas.ets,color="red", alpha=0.183,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima,color="blue",alpha=0.183, plot.conf = FALSE)+
geom_forecast(fVentas.ets,color="red", alpha=0.183,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima,color="blue",alpha=0.183, plot.conf = FALSE)+
geom_forecast(fVentas.ets,color="red", alpha=0.183,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
cbind(fventas.arima$mean,fventas.ets$mean)
cbind(fVentas.arima$mean,fVentas.ets$mean)
#Forecast out of the sample
#ARIMA MODEL
fit2=auto.arima(zVentas,lambda=0)
summary(fit2)
fventas.arima2=forecast(fit2)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fventas.arima2,color="blue", alpha=0.2,plot.conf = FALSE)+
geom_forecast(fventas.ets2,color="red", alpha=0.2,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
fVentas.arima2=forecast(fit2)
#ETS
etsfit2<-ets(zVentas,damped=TRUE)
summary(etsfit2)
#forecast model
fventas.ets2=forecast(etsfit2)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima2,color="blue", alpha=0.2,plot.conf = FALSE)+
geom_forecast(fVentas.ets2,color="red", alpha=0.2,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
#forecast model
fVentas.ets2 = forecast(etsfit2)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima2,color="blue", alpha=0.2,plot.conf = FALSE)+
geom_forecast(fVentas.ets2,color="red", alpha=0.2,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
# Ajustamos dataframe para poder convertirlo a una serie temporal
rawDate <- seq(as.Date("2008/04/01"), as.Date("2017/07/01"), by = "quarter")
rawIngresos <- rawData$Ingresos
rawData <- read.csv2("./IngresosApple.csv", sep=";")
head(rawData)
# Ajustamos dataframe para poder convertirlo a una serie temporal
rawDate <- seq(as.Date("2008/04/01"), as.Date("2017/07/01"), by = "quarter")
rawIngresos <- rawData$Ingresos
#Transform to ts data
tsVentas=ts(coredata(zVentas), start = c(2008, 1), frequency = 4)
#Seasonal Plot
ggfreqplot(tsVentas,freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Primas Trimestrales")
require(forecast) # Transform to zoo data
require(xts) # Create a XTS object
require(ggplot2) # graphs
library(ggfortify) # graphs
#Transform to ts data
tsVentas=ts(coredata(zVentas), start = c(2008, 1), frequency = 4)
#Seasonal Plot
ggfreqplot(tsVentas,freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Primas Trimestrales")
#Transform to ts data
tsVentas=ts(coredata(zVentas), start = c(2008, 1), frequency = 4)
#Seasonal Plot
ggfreqplot(tsVentas,freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Primas Trimestrales")
plot(tsVentas)
stl(tsVentas[, 1], s.window = "periodic")
plot(tsVentas)
stl(tsVentas[, 1], s.window = "Trimestre")
stl(tsVentas[, 1], s.window = "periodic")
plot(stl(tsVentas[, 1], s.window = "periodic"))
#box-Ljung Test
Box.test(fit1$residuals,lag=4, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=8, fitdf=1, type="Lj")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
require(forecast) # Transform to zoo data
require(xts) # Create a XTS object
require(ggplot2) # graphs
library(ggfortify) # graphs
rawData <- read.csv2("./IngresosApple.csv", sep=";")
head(rawData)
# Ajustamos dataframe para poder convertirlo a una serie temporal
rawDate <- seq(as.Date("2008/04/01"), as.Date("2017/07/01"), by = "quarter")
rawIngresos <- rawData$Ingresos
# Create a XTS object
xVentas=xts(rawIngresos,order.by=rawDate)
#Generate quarterly data
xVentas=to.quarterly(xVentas)
#Transform to zoo data (forecast package)
zVentas=as.zoo(xVentas$xVentas.Close)
#Change name
names(zVentas)="Ventas"
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ylab("Ventas")+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")
#Transform to ts data
tsVentas=ts(coredata(zVentas), start = c(2008, 1), frequency = 4)
#Seasonal Plot
ggfreqplot(tsVentas,freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Primas Trimestrales")
plot(tsVentas)
stl(tsVentas[, 1], s.window = "periodic")
plot(stl(tsVentas[, 1], s.window = "periodic"))
#Select number of observation to compare forecast
cOmit=3
#Data Size
nObs=length(zVentas)
#sub_sample
oVentas <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
#out sample (real data to forecast performance)
pVentas <- window(zVentas,start=index(zVentas[nObs-cOmit+1]),end=index(zVentas[nObs]))
#Log transformation?
zlVentas=log(zVentas)
df_newl <- data.frame(value = as.vector(zlVentas),
time = time(zlVentas))
ggplot(df_newl)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ylab("Ventas")+ggtitle("Ventas Trimestrales LOG Apple")+xlab("Trimestres")
#Difference
ggtsdisplay(zlVentas)
ggtsdisplay(diff(zlVentas))
ggtsdisplay(diff(zlVentas,4))
ggtsdisplay(diff(diff(zlVentas,4),1))
# MODEL ARIMA
fit1=auto.arima(oVentas,lambda=0)
summary(fit1)
#residual analysis
ggtsdisplay(fit1$residuals)
#box-Ljung Test
Box.test(fit1$residuals,lag=4, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=8, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=8, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=6, fitdf=1, type="Lj")
gData=data.frame(Date=time(fit1$residuals), fit1$residuals, check.names=FALSE, row.names=NULL)
ggplot(gData, aes(x=fit1$residuals)) +
geom_point(aes(x=Date,y=fit1$residuals))+
geom_line(aes(x=Date,y=fit1$residuals))+
geom_hline(yintercept = 2*sd(fit1$residuals),color="red",linetype = 2)+
geom_hline(yintercept = -2*sd(fit1$residuals),color="red",linetype = 2)+
ylab("Residuos")+
ggtitle("Residuos Modelo ARIMA: Ventas Trimestrales APPLE")+
xlab("Trimestres")
fVentas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fVentas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción Apple")
fVentas.arima
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima,color="blue",alpha=0.183, plot.conf = FALSE)+
geom_forecast(fVentas.ets,color="red", alpha=0.183,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
cbind(fVentas.arima$mean,fVentas.ets$mean)
#Forecast out of the sample
#ARIMA MODEL
fit2=auto.arima(zVentas,lambda=0)
summary(fit2)
fVentas.arima2=forecast(fit2)
#ETS
etsfit2<-ets(zVentas,damped=TRUE)
summary(etsfit2)
#forecast model
fVentas.ets2 = forecast(etsfit2)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima2,color="blue", alpha=0.2,plot.conf = FALSE)+
geom_forecast(fVentas.ets2,color="red", alpha=0.2,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
cbind(fVentas.arima2$mean,fVentas.ets2$mean)
rawData <- read.csv2("./IngresosApple.csv", sep=";")
rawData
#Select number of observation to compare forecast
cOmit=3
#Data Size
nObs=length(zVentas)
#sub_sample
oVentas <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
#out sample (real data to forecast performance)
pVentas <- window(zVentas,start=index(zVentas[nObs-cOmit+1]),end=index(zVentas[nObs]))
#Select number of observation to compare forecast
cOmit=3
#Data Size
nObs=length(zVentas)
#sub_sample
oVentas <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
#out sample (real data to forecast performance)
pVentas <- window(zVentas,start=index(zVentas[nObs-cOmit+1]),end=index(zVentas[nObs]))
pVentas
# Ajustamos dataframe para poder convertirlo a una serie temporal
rawDate <- seq(as.Date("2008/04/01"), as.Date("2017/07/01"), by = "quarter")
rawIngresos <- rawData$Ingresos
rowDate
# Ajustamos dataframe para poder convertirlo a una serie temporal
rawDate <- seq(as.Date("2008/04/01"), as.Date("2017/07/01"), by = "quarter")
rawIngresos <- rawData$Ingresos
rowDate
# Ajustamos dataframe para poder convertirlo a una serie temporal
rawDate <- seq(as.Date("2008/04/01"), as.Date("2017/07/01"), by = "quarter")
rawIngresos <- rawData$Ingresos
rawDate
# Create a XTS object
xVentas=xts(rawIngresos,order.by=rawDate)
xVentas
# Ajustamos dataframe para poder convertirlo a una serie temporal
rawDate <- seq(as.Date("2008/04/01"), as.Date("2017/07/01"), by = "quarter")
rawIngresos <- rawData$Ingresos
rawDate
rawIngresos
#Generate quarterly data
xVentas=to.quarterly(xVentas)
xVentas
#Transform to zoo data (forecast package)
zVentas=as.zoo(xVentas$xVentas.Close)
#Change name
names(zVentas)="Ventas"
#Generate quarterly data
xVentas=to.quarterly(xVentas)
#Transform to zoo data (forecast package)
zVentas=as.zoo(xVentas$xVentas.Close)
zVentas
#Change name
names(zVentas)="Ventas"
#Generate quarterly data
xVentas=to.quarterly(xVentas)
#Transform to zoo data (forecast package)
zVentas=as.zoo(xVentas$xVentas.Close)
zVentas
#Change name
names(zVentas)="Ventas"
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ylab("Ventas")+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")
#Generate quarterly data
xVentas=to.quarterly(xVentas)
#Transform to zoo data (forecast package)
zVentas=as.zoo(xVentas$xVentas.Close)
#Change name
names(zVentas)="Ventas"
zVentas
#Generate quarterly data
xVentas=to.quarterly(xVentas)
#Transform to zoo data (forecast package)
zVentas=as.zoo(xVentas$xVentas.Close)
#Change name
names(zVentas)="Ventas"
#Log transformation
zlVentas=log(zVentas)
df_newl <- data.frame(value = as.vector(zlVentas),
time = time(zlVentas))
ggplot(df_newl)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ylab("Ventas")+ggtitle("Ventas Trimestrales LOG Apple")+xlab("Trimestres")
#Transform to ts data
tsVentas=ts(coredata(zVentas), start = c(2008, 1), frequency = 4)
#Seasonal Plot
ggfreqplot(tsVentas,freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Primas Trimestrales")
#Transform to ts data
tsVentas=ts(coredata(zVentas), start = c(2008, 1), frequency = 4)
#Seasonal Plot
ggfreqplot(tsVentas,freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Trimestres")
#Transform to ts data
tsVentas=ts(coredata(zVentas), start = c(2008, 1), frequency = 4)
#Seasonal Plot
tsVentas
ggfreqplot(tsVentas,freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Trimestres")
rawVentas<-rawData$Ingresos
rawDate<-seq(as.Date("2008/04/01"), as.Date("2017/07/01"), by = "quarter")
# Create a XTS object
xVentas=xts(rawVentas,order.by=rawDate)
xVentas
#Select number of observation to compare forecast
cOmit=3
#Data Size
nObs=length(zVentas)
#sub_sample
oVentas <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
#out sample (real data to forecast performance)
pVentas <- window(zVentas,start=index(zVentas[nObs-cOmit+1]),end=index(zVentas[nObs]))
pVentas
#Difference
ggtsdisplay(zlVentas)
ggtsdisplay(diff(zlVentas))
```{r}
ggtsdisplay(diff(diff(zlVentas,4),1))
#residual analysis
ggtsdisplay(fit1$residuals)
# MODEL ARIMA
fit1=auto.arima(oVentas,lambda=0)
summary(fit1)
# MODEL ARIMA
fit1=auto.arima(oVentas,lambda=0)
fit1
summary(fit1)
# MODEL ARIMA
fit1=auto.arima(oVentas,lambda=0)
fit1
summary(fit1)
# MODEL ARIMA
fit1=auto.arima(oVentas,lambda=0)
fit1
summary(fit1)
ggtsdisplay(diff(zlVentas))
#Difference
ggtsdisplay(zlVentas)
ggtsdisplay(diff(zlVentas,4))
gData=data.frame(Date=time(fit1$residuals), fit1$residuals, check.names=FALSE, row.names=NULL)
ggplot(gData, aes(x=fit1$residuals)) +
geom_point(aes(x=Date,y=fit1$residuals))+
geom_line(aes(x=Date,y=fit1$residuals))+
geom_hline(yintercept = 2*sd(fit1$residuals),color="red",linetype = 2)+
geom_hline(yintercept = -2*sd(fit1$residuals),color="red",linetype = 2)+
ylab("Residuos")+
ggtitle("Residuos Modelo ARIMA: Ventas Trimestrales APPLE")+
xlab("Trimestres")
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fVentas.ets)
cbind(fVentas.arima$mean,fVentas.ets$mean)
#Forecast out of the sample
#ARIMA MODEL
fit2=auto.arima(zVentas,lambda=0)
summary(fit2)
fVentas.arima2=forecast(fit2)
fVentas.arima2=forecast(fit2)
#ETS
etsfit2<-ets(zVentas,damped=TRUE)
summary(etsfit2)
#forecast model
fVentas.ets2 = forecast(etsfit2)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima2,color="blue", alpha=0.2,plot.conf = FALSE)+
geom_forecast(fVentas.ets2,color="red", alpha=0.2,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
Box.test(fit1$residuals,lag=6, fitdf=1, type="Lj")
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fVentas.ets)
Box.test(fit1$residuals,lag=6, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=8, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=6, fitdf=1, type="Lj")
gData=data.frame(Date=time(fit1$residuals), fit1$residuals, check.names=FALSE, row.names=NULL)
ggplot(gData, aes(x=fit1$residuals)) +
geom_point(aes(x=Date,y=fit1$residuals))+
geom_line(aes(x=Date,y=fit1$residuals))+
geom_hline(yintercept = 2*sd(fit1$residuals),color="red",linetype = 2)+
geom_hline(yintercept = -2*sd(fit1$residuals),color="red",linetype = 2)+
ylab("Residuos")+
ggtitle("Residuos Modelo ARIMA: Ventas Trimestrales APPLE")+
xlab("Trimestres")
fVentas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fVentas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción Apple")
fVentas.arima
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fVentas.ets)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima,color="blue",alpha=0.183, plot.conf = FALSE)+
geom_forecast(fVentas.ets,color="red", alpha=0.183,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
cbind(fVentas.arima$mean,fVentas.ets$mean)
gData=data.frame(Date=time(fit1$residuals), fit1$residuals, check.names=FALSE, row.names=NULL)
ggplot(gData, aes(x=fit1$residuals)) +
geom_point(aes(x=Date,y=fit1$residuals))+
geom_line(aes(x=Date,y=fit1$residuals))+
geom_hline(yintercept = 2*sd(fit1$residuals),color="red",linetype = 2)+
geom_hline(yintercept = -2*sd(fit1$residuals),color="red",linetype = 2)+
ylab("Residuos")+
ggtitle("Residuos Modelo ARIMA: Ventas Trimestrales APPLE")+
xlab("Trimestres")
fVentas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fVentas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción Apple")
# MODEL ARIMA
fit1=auto.arima(oVentas,lambda=0)
summary(fit1)
fVentas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fVentas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción Apple")
fVentas.arima
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima,color="blue",alpha=0.183, plot.conf = FALSE)+
geom_forecast(fVentas.ets,color="red", alpha=0.183,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
cbind(fVentas.arima$mean,fVentas.ets$mean)
fVentas.arima
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fVentas.ets)
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima,color="blue",alpha=0.183, plot.conf = FALSE)+
geom_forecast(fVentas.ets,color="red", alpha=0.183,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
#Plot
ggplot(df_new)+geom_point(aes(x=time,y=value))+
geom_line(aes(x=time,y=value))+
geom_forecast(fVentas.arima,color="blue",alpha=0.183, plot.conf = FALSE)+
geom_forecast(fVentas.ets,color="red", alpha=0.183,plot.conf = FALSE)+
ggtitle("Forecast APPLE: ARIMA(blue) vs ETS(red)")
cbind(fVentas.arima$mean,fVentas.ets$mean)
#Forecast out of the sample
#ARIMA MODEL
fit2=auto.arima(zVentas,lambda=0)
summary(fit2)
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fVentas.ets)
fVentas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fVentas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción Apple")
fVentas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fVentas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción Apple")
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fVentas.ets)
fVentas.arima2=forecast(fit2)
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fVentas.ets)
# MODEL ARIMA
fit1=auto.arima(oVentas,lambda=0)
summary(fit1)
fVentas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fVentas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción Apple")
#ETS
etsfit<-ets(oVentas,damped = TRUE)
#forecast model
fVentas.ets=forecast(etsfit)
#Results
summary(fVentas.ets)
